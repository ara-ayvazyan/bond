namespace unittest

struct Box<T>
{
    1: T value;
}

struct BoxZigZag<T>
{
    [ProtoEncode("ZigZag")]
    1: T value;
}

struct BoxZigZagKey<K, V>
{
    [ProtoEncodeKey("ZigZag")]
    1: map<K, V> value;
}

struct BoxZigZagValue<K, V>
{
    [ProtoEncodeValue("ZigZag")]
    1: map<K, V> value;
}

struct BoxFixed<T>
{
    [ProtoEncode("Fixed")]
    1: T value;
}

struct BoxFixedKey<K, V>
{
    [ProtoEncodeKey("Fixed")]
    1: map<K, V> value;
}

struct BoxFixedValue<K, V>
{
    [ProtoEncodeValue("Fixed")]
    1: map<K, V> value;
}

struct BoxWrongEncoding<T>
{
    [ProtoEncode("WrongValue")]
    1: T value;
}

struct BoxWrongPackingWrongKeyEncoding<T>
{
    [ProtoPack("WrongValue")]
    [ProtoEncodeKey("WrongValue")]
    1: T value;
}

struct BoxWrongPackingWrongValueEncoding<T>
{
    [ProtoPack("WrongValue")]
    [ProtoEncodeValue("WrongValue")]
    1: T value;
}

struct BoxUnpacked<T>
{
    [ProtoPack("False")]
    1: T value;
}

struct BoxUnpackedFixed<T>
{
    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    1: T value;
}

struct BoxUnpackedZigZag<T>
{
    [ProtoPack("False")]
    [ProtoEncode("ZigZag")]
    1: T value;
}

struct BoxUnpackedWrongEncoding<T>
{
    [ProtoPack("False")]
    [ProtoEncodeValue("WrongValue")]
    1: T value;
}

struct BoxWrongPacking<T>
{
    [ProtoPack("WrongValue")]
    1: T value;
}

struct BoxWrongPackingWrongEncoding<T>
{
    [ProtoPack("WrongValue")]
    [ProtoEncode("WrongValue")]
    1: T value;
}

struct Derived : Box<int32>
{}

struct Field0
{
    0: int32 value;
}

struct Field19000
{
    19000: int32 value;
}

struct Field19111
{
    19111: int32 value;
}

struct Field19999
{
    19999: int32 value;
}

enum Enum
{
    Value0 = 0,
    Value1 = 1
}

struct Integers
{
    1: int32 i32;

    2: int64 i64;

    3: uint32 ui32;

    4: uint64 ui64;

    [ProtoEncode("ZigZag")]
    5: int32 si32;

    [ProtoEncode("ZigZag")]
    6: int64 si64;

    [ProtoEncode("Fixed")]
    7: uint32 f32;

    [ProtoEncode("Fixed")]
    8: int32 sf32;

    [ProtoEncode("Fixed")]
    9: uint64 f64;

    [ProtoEncode("Fixed")]
    10: int64 sf64;

    11: Enum e = Value0;

    [ProtoEncode("RandomValue")]
    12: bool b;

    [ProtoEncode("RandomValue")]
    13: float f;

    [ProtoEncode("RandomValue")]
    14: double d;

    15: int8 iv8;

    [ProtoEncode("ZigZag")]
    16: int8 iz8;

    [ProtoEncode("Fixed")]
    17: int8 if8;

    18: int16 iv16;

    [ProtoEncode("ZigZag")]
    19: int16 iz16;

    [ProtoEncode("Fixed")]
    20: int16 if16;

    21: uint8 uiv8;

    [ProtoEncode("Fixed")]
    22: uint8 uif8;

    23: uint16 uiv16;

    [ProtoEncode("Fixed")]
    24: uint16 uif16;
}

struct IntegersContainer
{
    1: vector<int32> i32;

    2: vector<int64> i64;

    3: vector<uint32> ui32;

    4: vector<uint64> ui64;

    [ProtoEncode("ZigZag")]
    5: vector<int32> si32;

    [ProtoEncode("ZigZag")]
    6: vector<int64> si64;

    [ProtoEncode("Fixed")]
    7: vector<uint32> f32;

    [ProtoEncode("Fixed")]
    8: vector<int32> sf32;

    [ProtoEncode("Fixed")]
    9: vector<uint64> f64;

    [ProtoEncode("Fixed")]
    10: vector<int64> sf64;

    11: vector<Enum> e;

    [ProtoEncode("RandomValue")]
    12: vector<bool> b;

    [ProtoEncode("RandomValue")]
    13: vector<float> f;

    [ProtoEncode("RandomValue")]
    14: vector<double> d;

    15: vector<int16> iv16;

    [ProtoEncode("ZigZag")]
    16: vector<int16> iz16;

    [ProtoEncode("Fixed")]
    17: vector<int16> if16;

    18: vector<uint8> uiv8;

    [ProtoEncode("Fixed")]
    19: vector<uint8> uif8;

    20: vector<uint16> uiv16;

    [ProtoEncode("Fixed")]
    21: vector<uint16> uif16;
}

struct UnpackedIntegersContainer
{
    [ProtoPack("False")]
    1: vector<int32> i32;

    [ProtoPack("False")]
    2: vector<int64> i64;

    [ProtoPack("False")]
    3: vector<uint32> ui32;

    [ProtoPack("False")]
    4: vector<uint64> ui64;

    [ProtoPack("False")]
    [ProtoEncode("ZigZag")]
    5: vector<int32> si32;

    [ProtoPack("False")]
    [ProtoEncode("ZigZag")]
    6: vector<int64> si64;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    7: vector<uint32> f32;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    8: vector<int32> sf32;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    9: vector<uint64> f64;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    10: vector<int64> sf64;

    [ProtoPack("False")]
    11: vector<Enum> e;

    [ProtoPack("False")]
    [ProtoEncode("RandomValue")]
    12: vector<bool> b;

    [ProtoPack("False")]
    [ProtoEncode("RandomValue")]
    13: vector<float> f;

    [ProtoPack("False")]
    [ProtoEncode("RandomValue")]
    14: vector<double> d;

    [ProtoPack("False")]
    15: vector<int16> iv16;

    [ProtoPack("False")]
    [ProtoEncode("ZigZag")]
    16: vector<int16> iz16;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    17: vector<int16> if16;

    [ProtoPack("False")]
    18: vector<uint8> uiv8;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    19: vector<uint8> uif8;

    [ProtoPack("False")]
    20: vector<uint16> uiv16;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    21: vector<uint16> uif16;
}

struct IntegersSetContainer
{
    1: set<int32> i32;

    2: set<int64> i64;

    3: set<uint32> ui32;

    4: set<uint64> ui64;

    [ProtoEncode("ZigZag")]
    5: set<int32> si32;

    [ProtoEncode("ZigZag")]
    6: set<int64> si64;

    [ProtoEncode("Fixed")]
    7: set<uint32> f32;

    [ProtoEncode("Fixed")]
    8: set<int32> sf32;

    [ProtoEncode("Fixed")]
    9: set<uint64> f64;

    [ProtoEncode("Fixed")]
    10: set<int64> sf64;

    11: set<Enum> e;

    [ProtoEncode("RandomValue")]
    12: set<bool> b;

    [ProtoEncode("RandomValue")]
    13: set<float> f;

    [ProtoEncode("RandomValue")]
    14: set<double> d;

    15: set<int16> iv16;

    [ProtoEncode("ZigZag")]
    16: set<int16> iz16;

    [ProtoEncode("Fixed")]
    17: set<int16> if16;

    18: set<uint8> uiv8;

    [ProtoEncode("Fixed")]
    19: set<uint8> uif8;

    20: set<uint16> uiv16;

    [ProtoEncode("Fixed")]
    21: set<uint16> uif16;
}

struct UnpackedIntegersSetContainer
{
    [ProtoPack("False")]
    1: set<int32> i32;

    [ProtoPack("False")]
    2: set<int64> i64;

    [ProtoPack("False")]
    3: set<uint32> ui32;

    [ProtoPack("False")]
    4: set<uint64> ui64;

    [ProtoPack("False")]
    [ProtoEncode("ZigZag")]
    5: set<int32> si32;

    [ProtoPack("False")]
    [ProtoEncode("ZigZag")]
    6: set<int64> si64;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    7: set<uint32> f32;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    8: set<int32> sf32;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    9: set<uint64> f64;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    10: set<int64> sf64;

    [ProtoPack("False")]
    11: set<Enum> e;

    [ProtoPack("False")]
    [ProtoEncode("RandomValue")]
    12: set<bool> b;

    [ProtoPack("False")]
    [ProtoEncode("RandomValue")]
    13: set<float> f;

    [ProtoPack("False")]
    [ProtoEncode("RandomValue")]
    14: set<double> d;

    [ProtoPack("False")]
    15: set<int16> iv16;

    [ProtoPack("False")]
    [ProtoEncode("ZigZag")]
    16: set<int16> iz16;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    17: set<int16> if16;

    [ProtoPack("False")]
    18: set<uint8> uiv8;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    19: set<uint8> uif8;

    [ProtoPack("False")]
    20: set<uint16> uiv16;

    [ProtoPack("False")]
    [ProtoEncode("Fixed")]
    21: set<uint16> uif16;
}

struct Nullable
{
    [ProtoPack("False")]
    1: nullable<uint32> ui32;

    2: nullable<string> str;

    3: nullable<blob> b;

    4: nullable<IntegersContainer> s;

    5: nullable<uint32> vui32;

    6: nullable<string> vstr;

    7: nullable<blob> vb;

    8: nullable<IntegersContainer> vs;
}

struct IntegerMapKeys
{
    1: map<int32, uint32> i32;

    2: map<int64, uint32> i64;

    3: map<uint32, uint32> ui32;

    4: map<uint64, uint32> ui64;

    [ProtoEncodeKey("ZigZag")]
    5: map<int32, uint32> si32;

    [ProtoEncodeKey("ZigZag")]
    6: map<int64, uint32> si64;

    [ProtoEncodeKey("Fixed")]
    7: map<uint32, uint32> f32;

    [ProtoEncodeKey("Fixed")]
    8: map<int32, uint32> sf32;

    [ProtoEncodeKey("Fixed")]
    9: map<uint64, uint32> f64;

    [ProtoEncodeKey("Fixed")]
    10: map<int64, uint32> sf64;

    [ProtoEncodeKey("RandomValue")]
    11: map<bool, uint32> b;

    12: map<int8, uint32> iv8;

    [ProtoEncodeKey("ZigZag")]
    13: map<int8, uint32> iz8;

    [ProtoEncodeKey("Fixed")]
    14: map<int8, uint32> if8;

    15: map<int16, uint32> iv16;

    [ProtoEncodeKey("ZigZag")]
    16: map<int16, uint32> iz16;

    [ProtoEncodeKey("Fixed")]
    17: map<int16, uint32> if16;

    18: map<uint8, uint32> uiv8;

    [ProtoEncodeKey("Fixed")]
    19: map<uint8, uint32> uif8;

    20: map<uint16, uint32> uiv16;

    [ProtoEncodeKey("Fixed")]
    21: map<uint16, uint32> uif16;
}

struct IntegerMapValues
{
    1: map<uint32, int32> i32;

    2: map<uint32, int64> i64;

    3: map<uint32, uint32> ui32;

    4: map<uint32, uint64> ui64;

    [ProtoEncodeValue("ZigZag")]
    5: map<uint32, int32> si32;

    [ProtoEncodeValue("ZigZag")]
    6: map<uint32, int64> si64;

    [ProtoEncodeValue("Fixed")]
    7: map<uint32, uint32> f32;

    [ProtoEncodeValue("Fixed")]
    8: map<uint32, int32> sf32;

    [ProtoEncodeValue("Fixed")]
    9: map<uint32, uint64> f64;

    [ProtoEncodeValue("Fixed")]
    10: map<uint32, int64> sf64;

    [ProtoEncodeValue("RandomValue")]
    11: map<uint32, bool> b;

    [ProtoEncodeValue("RandomValue")]
    12: map<uint32, float> f;

    [ProtoEncodeValue("RandomValue")]
    13: map<uint32, double> d;

    14: map<uint32, Enum> e;

    15: map<uint32, int8> iv8;

    [ProtoEncodeValue("ZigZag")]
    16: map<uint32, int8> iz8;

    [ProtoEncodeValue("Fixed")]
    17: map<uint32, int8> if8;

    18: map<uint32, int16> iv16;

    [ProtoEncodeValue("ZigZag")]
    19: map<uint32, int16> iz16;

    [ProtoEncodeValue("Fixed")]
    20: map<uint32, int16> if16;

    21: map<uint32, uint8> uiv8;

    [ProtoEncodeValue("Fixed")]
    22: map<uint32, uint8> uif8;

    23: map<uint32, uint16> uiv16;

    [ProtoEncodeValue("Fixed")]
    24: map<uint32, uint16> uif16;
}

struct MatchingVarTypes
{
      1: uint32 match_1;
      2: uint8 ui8;
      3: uint32 match_3;
      4: uint16 ui16;
      5: uint32 match_5;
      6: uint32 ui32;
      7: uint32 match_7;
      8: uint64 ui64;
      9: uint32 match_9;
     10: int8 i8;
     11: uint32 match_11;
     12: int16 i16;
     13: uint32 match_13;
     14: int32 i32;
     15: uint32 match_15;
     16: int64 i64;
     17: uint32 match_17;
     18: Enum e = Value0;
     19: uint32 match_19;
     20: bool b;
     21: uint32 match_21;
     22: float f;
     23: uint32 match_23;
     24: double d;
     25: uint32 match_25;
     26: string s;
     27: uint32 match_27;
     28: wstring ws;
     29: uint32 match_29;
     30: blob bb;
     31: uint32 match_31;
     32: vector<uint8> vui8;
     33: uint32 match_33;
     34: vector<uint16> vui16;
     35: uint32 match_35;
     36: vector<uint32> vui32;
     37: uint32 match_37;
     38: vector<uint64> vui64;
     39: uint32 match_39;
     40: vector<int8> vi8;
     41: uint32 match_41;
     42: vector<int16> vi16;
     43: uint32 match_43;
     44: vector<int32> vi32;
     45: uint32 match_45;
     46: vector<int64> vi64;
     47: uint32 match_47;
     48: vector<Enum> ve;
     49: uint32 match_49;
     50: vector<bool> vb;
     51: uint32 match_51;
     52: vector<float> vf;
     53: uint32 match_53;
     54: vector<double> vd;
     55: uint32 match_55;
     56: vector<string> vs;
     57: uint32 match_57;
     58: vector<wstring> vws;
     59: uint32 match_59;
     60: vector<blob> vbb;
     61: uint32 match_61;
     62: vector<Integers> vsi;
     63: uint32 match_63;
     64: set<uint8> sui8;
     65: uint32 match_65;
     66: set<uint16> sui16;
     67: uint32 match_67;
     68: set<uint32> sui32;
     69: uint32 match_69;
     70: set<uint64> sui64;
     71: uint32 match_71;
     72: set<int8> si8;
     73: uint32 match_73;
     74: set<int16> si16;
     75: uint32 match_75;
     76: set<int32> si32;
     77: uint32 match_77;
     78: set<int64> si64;
     79: uint32 match_79;
     80: set<Enum> se;
     81: uint32 match_81;
     82: set<bool> sb;
     83: uint32 match_83;
     84: set<float> sf;
     85: uint32 match_85;
     86: set<double> sd;
     87: uint32 match_87;
     88: set<string> ss;
     89: uint32 match_89;
     90: set<wstring> sws;
     91: uint32 match_91;
     92: map<uint8, uint32> mkui8;
     93: uint32 match_93;
     94: map<uint16, uint32> mkui16;
     95: uint32 match_95;
     96: map<uint32, uint32> mkui32;
     97: uint32 match_97;
     98: map<uint64, uint32> mkui64;
     99: uint32 match_99;
    100: map<int8, uint32> mki8;
    101: uint32 match_101;
    102: map<int16, uint32> mki16;
    103: uint32 match_103;
    104: map<int32, uint32> mki32;
    105: uint32 match_105;
    106: map<int64, uint32> mki64;
    107: uint32 match_107;
    108: map<bool, uint32> mkb;
    109: uint32 match_109;
    110: map<uint32, uint8> mvui8;
    111: uint32 match_111;
    112: map<uint32, uint16> mvui16;
    113: uint32 match_113;
    114: map<uint32, uint32> mvui32;
    115: uint32 match_115;
    116: map<uint32, uint64> mvui64;
    117: uint32 match_117;
    118: map<uint32, int8> mvi8;
    119: uint32 match_119;
    120: map<uint32, int16> mvi16;
    121: uint32 match_121;
    122: map<uint32, int32> mvi32;
    123: uint32 match_123;
    124: map<uint32, int64> mvi64;
    125: uint32 match_125;
    126: map<uint32, Enum> mve;
    127: uint32 match_127;
    128: map<uint32, bool> mvb;
    129: uint32 match_129;
    130: map<uint32, float> mvf;
    131: uint32 match_131;
    132: map<uint32, double> mvd;
    133: uint32 match_133;
    134: map<uint32, string> mvs;
    135: uint32 match_135;
    136: map<uint32, wstring> mvws;
    137: uint32 match_137;
    138: map<uint32, blob> mvbb;
    139: uint32 match_139;
    140: map<uint32, Integers> mvsi;
    141: uint32 match_141;
    142: Integers si;
    143: uint32 match_143;
}

struct NonMatchingVarTypes
{
      1: uint32 match_1;
      2: int8 ui8;
      3: uint32 match_3;
      4: uint8 ui16;
      5: uint32 match_5;
      6: uint16 ui32;
      7: uint32 match_7;
      8: uint32 ui64;
      9: uint32 match_9;
     10: uint8 i8;
     11: uint32 match_11;
     12: int8 i16;
     13: uint32 match_13;
     14: int16 i32;
     15: uint32 match_15;
     16: int32 i64;
     17: uint32 match_17;
     18: int16 e;
     19: uint32 match_19;
     20: int16 b;
     21: uint32 match_21;
     22: int32 f;
     23: uint32 match_23;
     24: float d;
     25: uint32 match_25;
     26: wstring s;
     27: uint32 match_27;
     28: string ws;
     29: uint32 match_29;
     30: vector<uint8> bb;
     31: uint32 match_31;
     32: vector<int8> vui8;
     33: uint32 match_33;
     34: vector<uint8> vui16;
     35: uint32 match_35;
     36: vector<uint16> vui32;
     37: uint32 match_37;
     38: vector<uint32> vui64;
     39: uint32 match_39;
     40: vector<uint8> vi8;
     41: uint32 match_41;
     42: vector<int8> vi16;
     43: uint32 match_43;
     44: vector<int16> vi32;
     45: uint32 match_45;
     46: vector<int32> vi64;
     47: uint32 match_47;
     48: vector<uint8> ve;
     49: uint32 match_49;
     50: vector<int16> vb;
     51: uint32 match_51;
     52: vector<int32> vf;
     53: uint32 match_53;
     54: vector<float> vd;
     55: uint32 match_55;
     56: vector<wstring> vs;
     57: uint32 match_57;
     58: vector<string> vws;
     59: uint32 match_59;
     60: vector<uint64> vbb;
     61: uint32 match_61;
     62: vector<wstring> vsi;
     63: uint32 match_63;
     64: set<int8> sui8;
     65: uint32 match_65;
     66: set<uint8> sui16;
     67: uint32 match_67;
     68: set<uint16> sui32;
     69: uint32 match_69;
     70: set<uint32> sui64;
     71: uint32 match_71;
     72: set<uint8> si8;
     73: uint32 match_73;
     74: set<int8> si16;
     75: uint32 match_75;
     76: set<int16> si32;
     77: uint32 match_77;
     78: set<int32> si64;
     79: uint32 match_79;
     80: set<int16> se;
     81: uint32 match_81;
     82: set<uint16> sb;
     83: uint32 match_83;
     84: set<int32> sf;
     85: uint32 match_85;
     86: set<float> sd;
     87: uint32 match_87;
     88: set<wstring> ss;
     89: uint32 match_89;
     90: set<string> sws;
     91: uint32 match_91;
     92: map<int8, uint32> mkui8;
     93: uint32 match_93;
     94: map<uint8, uint32> mkui16;
     95: uint32 match_95;
     96: map<uint16, uint32> mkui32;
     97: uint32 match_97;
     98: map<uint32, uint32> mkui64;
     99: uint32 match_99;
    100: map<uint8, uint32> mki8;
    101: uint32 match_101;
    102: map<int8, uint32> mki16;
    103: uint32 match_103;
    104: map<int16, uint32> mki32;
    105: uint32 match_105;
    106: map<int32, uint32> mki64;
    107: uint32 match_107;
    108: map<uint8, uint32> mkb;
    109: uint32 match_109;
    110: map<uint32, int8> mvui8;
    111: uint32 match_111;
    112: map<uint32, uint8> mvui16;
    113: uint32 match_113;
    114: map<uint32, uint16> mvui32;
    115: uint32 match_115;
    116: map<uint32, uint32> mvui64;
    117: uint32 match_117;
    118: map<uint32, uint8> mvi8;
    119: uint32 match_119;
    120: map<uint32, int8> mvi16;
    121: uint32 match_121;
    122: map<uint32, int16> mvi32;
    123: uint32 match_123;
    124: map<uint32, int32> mvi64;
    125: uint32 match_125;
    126: map<uint32, uint16> mve;
    127: uint32 match_127;
    128: map<uint32, int64> mvb;
    129: uint32 match_129;
    130: map<uint32, uint32> mvf;
    131: uint32 match_131;
    132: map<uint32, float> mvd;
    133: uint32 match_133;
    134: map<uint32, wstring> mvs;
    135: uint32 match_135;
    136: map<uint32, string> mvws;
    137: uint32 match_137;
    138: map<uint32, string> mvbb;
    139: uint32 match_139;
    140: map<uint32, blob> mvsi;
    141: uint32 match_141;
    142: string si;
    143: uint32 match_143;
}

struct ComplexItem
{
    1: Integers s1;
    2: IntegersContainer s2;
    3: UnpackedIntegersContainer s3;
    4: IntegerMapKeys s4;
    5: string str;
    6: map<string, uint32> mstr;
    7: map<uint32, string> strm;
    8: vector<string> strs;
    9: blob b;
    10: map<uint32, blob> mblob;
    11: vector<blob> blobs;
    12: vector<Integers> vs1;
    13: vector<IntegersContainer> vs2;
    14: vector<UnpackedIntegersContainer> vs3;
    15: vector<IntegerMapKeys> vs4;
}

struct ComplexStruct
{
    1: ComplexItem item;
    2: map<uint64, ComplexItem> mitems;
    3: vector<ComplexItem> items;
    4: string str;
}
